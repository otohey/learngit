#Git操作学习笔记，notepad++中编写

"""
Git安装介绍及全局设置
"""
安装Git后，打开Git bash，进行设置（指明自己机器）
$git config --golbal user.name "XXX"
$git config --golbal user.emali "xxx@XX.xx"
$git config --golabl core.editor vim


"""
Git的简单操作命令
"""
$mkdir 文件夹名				#在当前目录下创建文件夹
$cd 文件夹名				#进入到指定文件夹下，但必须在目录中
$pwd					   #显示当前所在目录
$git init				   #将当前目录变成Git可管理的仓库，同时生成名为".git"的隐藏文件夹，不要对其进行修改
$git add 文件名			         #添加指定文件到Git的仓库中
$git commit -m "xx"			   #提交文件到Git的仓库，"—m"是参数，xx为改动的说明
$git status				   #查看仓库的当前状态，可用于判别是否有文件修改后却未添加add到仓库，以及是否提交commit
$git diff                   		   #若有修改，则将显示修改信息
$git log				   #显示修改信息。--pretty=online美化下信息
$git reset --hard HEAD^			   #版本回退。HEAD^回退到上一个，HEAD^^回退到上上个，HEAD~100回到上100的版本
$git reset --hard 版本ID			 #回到版本号所对应的版本中，支持向前向后回复版本
$git reflog				   #可以查看全部的版本变化
$git checkout -- 文件名			#放弃文件的修改：1.文件自修改还未放入暂存区，将撤销修改到版本库一模一样的状态
							# 2.文件已添加到暂存区，又进行自修改，撤销修改到和暂存区中的一致
$git reset HEAD 文件名		        #把放入暂存区的修改文件撤销掉（UNstage），重新放回工作区
$rm 文件名			                #将当前目录下的指定文件删除，有无添加到Git仓库的文件都可以
				          #可以通过"git checkout -- 文件名"将误删的文件回复到最新版本，即将仓库里的文件放到工作区
$git rm 文件名			        #将该文件从目录下删除，并把其从Git版本库中移除
				          #由于已经从Git仓库中移除了，因此无法使用checkout回复
$git rm --cached 文件名                   #不删除对应文件，并且不再追踪该文件
$git mv file_from file_to		  #移动文件并重命名。流程：将源文件复制并重命名成新文件————删除源文件————追踪新文件
$git tag				  #列出已有标签
$git tag -l 'v1.*'			  #将所有v1.x的标签都列出来
$git tag 标签				#将当然提交添加标签，轻量标签
$git tag -a 标签 				#在当前提交添加附注标签，将会让你输入标签信息，也使用 --message=""
					   推荐使用 附注标签
$git tag -a 标签 校验和		      #在指定提交下添加标签		





"""
Git的分支操作命令
"""
$git log --online --decorate --all --graph	#已树图形式显示各个分支所指向的对象
$git branch 分支名字		     	     #在当前提交下，创建一个分支
$git checkout 分支名字		     	     #切换到对应分支
$git checkout -b 分支名字			     #创建一个分支，并切换到该分支
$git checkout -b 分支名字 标签号	 	  #在指定的标签下创建分支
$git merge 分支名字				     #将 分支名字 合并到当前分支
$git rebase 分支名字			     #将当前分支的基底切换到  分支名字 上去，实现串流
$git rebase --onto master server client		#取出 client 分支，找出处于 client 分支和 server 分支的共同祖先之后的修改，然后把它们在 master 分支上重放一遍
$git rebase A B				 	#将分支B变基到分支A上


"""
"利用GitHub建立远程库"——简要流程：
"""
#前提：一个本地Git仓库，一个GitHub仓库
$ ssh-keygen -t rsa -C "邮箱号"		#创建本地的ssh密钥。注意填写自己对应的邮箱。
					  #用户目录下会生产".ssh"文件夹及其中的"id_rsa","id_rsa.pub"。
					  #"id_rsa","id_rsa.pub"为密钥对，前者是私有不能泄露的，后者是公共的
					  #将本地生成的公共密钥添加到GitHub的SSH keys中
$ git remote add origin 远程库链接	      #在Git本地仓库下运行，将关联到GitHub远程仓库上。例子：远程库链接git@github.com:otohey/learngit.git
$ git push -u origin master		  #将Git本地库的所有内容推到GitHub远程库中
					  #由于GitHub远程库是空的，第一次推"master"分支，要加上"-u" 
$ git push origin master		  #及时推送新修改



"""
.gitignore文件填写规范
"""
#所有#开头的行,空行都会被忽略
#表示了a.c会被忽略，所有.o文件都被忽略
a.c
*.o
#星号（*）匹配零个或多个任意字符；
#[abc] 匹配任何一个列在方括号中的字符（[abc]这个例子要么匹配一个a，要么匹配一个 b，要么匹配一个 c）；
#问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如[0-9] 表示匹配所有 0 到 9 的数字）。 #使用两个星号（*) 表示匹配任意中间目录，比如`a/**/z` 可以匹配 a/z, a/b/z 或 `a/b/c/z`等。
#https://github.com/github/gitignore里有详细列表可供参考
